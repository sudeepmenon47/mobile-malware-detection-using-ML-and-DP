import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

from sklearn.feature_selection import mutual_info_classif
from sklearn import preprocessing

from sklearn.svm import SVC, LinearSVC
from sklearn import svm
import csv
import random


import sklearn

from sklearn.model_selection import train_test_split



# Exploring the malware dataset

malData = pd.read_csv('MalwareData.csv' , sep="|" , low_memory=True)
# print(malData.head())
# print(malData.shape)
# print(malData.describe())

flg = plt.figure()
ax = flg.add_axes([0,0,1,1])
ax.hist(malData['legitimate'],20)
plt.show()

#############   DATA CLEANING   ###################
y=malData['legitimate']
malData =  malData.drop(['legitimate'] , axis=1)

malData = malData.drop(['Name'] , axis=1)
malData = malData.drop(['md5'], axis=1)

print("The Name and md5 variables are removed successfully")


######### Spliting the dataset into test and train ##########

X_train ,X_test , y_train , y_test = train_test_split(malData,y,test_size=0.2 , random_state = 42)
X_train.shape


###########  MODEL BUILDING ##################

# 1. Random Forest

from sklearn.ensemble import RandomForestClassifier
from sklearn.datasets import make_classification

clf = RandomForestClassifier(max_depth=2 , random_state=0)
randomModel = clf.fit(X_train , y_train)


# Random forest evaluation on test data

from sklearn.metrics import f1_score , accuracy_score , plot_confusion_matrix, auc , confusion_matrix

# Accuracy on the train dataset
train_pred = randomModel.predict(X_train)
print(accuracy_score(y_train , train_pred))

# Accuracy on the test dataset
prediction = randomModel.predict(X_test)
print(accuracy_score(y_test, prediction))


print(f1_score(y_test, prediction))


# Confusion Matrix


titles_options = [("Confusion matrix without normalization" , None) ,
                  ("Normalized confusion matrix" , 'true') ]

for title , normalize in titles_options:
    disp = plot_confusion_matrix(randomModel , 
                                X_test , 
                                y_test , 
                                cmap=plt.cm.Blues , 
                                normalize=normalize)
    disp.ax_.set_title(title)
    print(title)
    print(disp.confusion_matrix)

    plt.show()



############## 2.logistic regression #######################################

from sklearn.datasets import load_iris
from sklearn.linear_model import LogisticRegression

clf = LogisticRegression(random_state=0)
logModel = clf.fit(X_train , y_train)

# Model Evaluation 


# Accuracy on the train dataset
train_log = logModel.predict(X_train)
print(accuracy_score(y_train , train_log))


# Accuracy on the test dataset
pred = logModel.predict(X_test)
print(accuracy_score(y_test, pred))
print((f1_score(y_test , pred)))


titles_options = [("Confusion matrix without normalization" , None) ,
                  ("Normalized confusion matrix" , 'true') ]

for title , normalize in titles_options:
    disp = plot_confusion_matrix(logModel , 
                                X_test , 
                                y_test , 
                                cmap=plt.cm.Blues , 
                                normalize=normalize)
    disp.ax_.set_title(title)
    print(title)
    print(disp.confusion_matrix)

    plt.show()


################### 3 . Neural Network ####################################

import tensorflow as tf
from tensorflow.keras.models  import Sequential
from tensorflow.keras.layers import Dense

# Define Model

model = Sequential()
model.add(Dense(16 , input_dim = 54 , activation="relu"))
model.add(Dense(8 ,  activation="relu"))
model.add(Dense(4 ,  activation="relu"))
model.add(Dense(1 ,  activation="sigmoid"))
model.summary()



# complite model
model.compile(loss="binary_crossentropy" , optimizer="rmsprop" , metrics=["accuracy"])
# Fit Model
model.fit(X_train , y_train , epochs=5 , batch_size=32)



# models evaluation 

trainPred = model.predict(X_train)
trainPred =[ 1 if y>= 0.5 else 0 for y in trainPred ]
print(accuracy_score(y_train , trainPred))


y_prediction = model.predict(X_test)
y_prediction = [1 if y>= 0.5 else 0 for y in y_prediction]

print("prediction",accuracy_score(y_test , y_prediction))
print(confusion_matrix(y_test , y_prediction))
